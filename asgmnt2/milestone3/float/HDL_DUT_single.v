// -------------------------------------------------------------
// 
// File Name: C:\Course_Material\UofT\ECE1718\assignment2\Simulink\MAC_single_code_gen\MAC_single\HDL_DUT.v
// Created: 2023-03-09 15:00:36
// 
// Generated by MATLAB 9.13 and HDL Coder 4.0
// 
// 
// -- -------------------------------------------------------------
// -- Rate and Clocking Details
// -- -------------------------------------------------------------
// Model base rate: 0.2
// Target subsystem base rate: 0.2
// 
// 
// Clock Enable  Sample Time
// -- -------------------------------------------------------------
// ce_out        0.2
// -- -------------------------------------------------------------
// 
// 
// Output Signal                 Clock Enable  Sample Time
// -- -------------------------------------------------------------
// out                           ce_out        0.2
// -- -------------------------------------------------------------
// 
// -------------------------------------------------------------


// -------------------------------------------------------------
// 
// Module: HDL_DUT
// Source Path: MAC_single/HDL_DUT
// Hierarchy Level: 0
// 
// -------------------------------------------------------------

`timescale 1 ns / 1 ns

module HDL_DUT
          (clk,
           reset,
           clk_enable,
           in1,
           in2,
           ce_out,
           out);


  input   clk;
  input   reset;
  input   clk_enable;
  input   [31:0] in1;  // single
  input   [31:0] in2;  // single
  output  ce_out;
  output  [31:0] out;  // single


  wire enb;
  wire stateControl_1;
  reg  [0:7] delayMatch_reg;  // ufix1 [8]
  wire [0:7] delayMatch_reg_next;  // ufix1 [8]
  wire stateControl_2;
  wire [31:0] Dot_Product_out1;  // ufix32
  reg [31:0] Memory_out1;  // ufix32
  wire [31:0] Add_out1;  // ufix32
  wire [31:0] Add_out1_1;  // ufix32


  assign stateControl_1 = 1'b1;



  assign enb = clk_enable;

  always @(posedge clk or posedge reset)
    begin : delayMatch_process
      if (reset == 1'b1) begin
        delayMatch_reg[0] <= 1'b0;
        delayMatch_reg[1] <= 1'b0;
        delayMatch_reg[2] <= 1'b0;
        delayMatch_reg[3] <= 1'b0;
        delayMatch_reg[4] <= 1'b0;
        delayMatch_reg[5] <= 1'b0;
        delayMatch_reg[6] <= 1'b0;
        delayMatch_reg[7] <= 1'b0;
      end
      else begin
        if (enb) begin
          delayMatch_reg[0] <= delayMatch_reg_next[0];
          delayMatch_reg[1] <= delayMatch_reg_next[1];
          delayMatch_reg[2] <= delayMatch_reg_next[2];
          delayMatch_reg[3] <= delayMatch_reg_next[3];
          delayMatch_reg[4] <= delayMatch_reg_next[4];
          delayMatch_reg[5] <= delayMatch_reg_next[5];
          delayMatch_reg[6] <= delayMatch_reg_next[6];
          delayMatch_reg[7] <= delayMatch_reg_next[7];
        end
      end
    end

  assign stateControl_2 = delayMatch_reg[7];
  assign delayMatch_reg_next[0] = stateControl_1;
  assign delayMatch_reg_next[1] = delayMatch_reg[0];
  assign delayMatch_reg_next[2] = delayMatch_reg[1];
  assign delayMatch_reg_next[3] = delayMatch_reg[2];
  assign delayMatch_reg_next[4] = delayMatch_reg[3];
  assign delayMatch_reg_next[5] = delayMatch_reg[4];
  assign delayMatch_reg_next[6] = delayMatch_reg[5];
  assign delayMatch_reg_next[7] = delayMatch_reg[6];



  nfp_mul_single u_nfp_mul_comp (.clk(clk),
                                 .reset(reset),
                                 .enb(clk_enable),
                                 .nfp_in1(in1),  // single
                                 .nfp_in2(in2),  // single
                                 .nfp_out(Dot_Product_out1)  // single
                                 );

  nfp_add_single u_nfp_add_comp (.clk(clk),
                                 .reset(reset),
                                 .enb(clk_enable),
                                 .nfp_in1(Dot_Product_out1),  // single
                                 .nfp_in2(Memory_out1),  // single
                                 .nfp_out(Add_out1)  // single
                                 );

  assign Add_out1_1 = (stateControl_2 == 1'b0 ? Memory_out1 :
              Add_out1);



  always @(posedge clk or posedge reset)
    begin : Memory_process
      if (reset == 1'b1) begin
        Memory_out1 <= 32'h00000000;
      end
      else begin
        if (enb) begin
          Memory_out1 <= Add_out1_1;
        end
      end
    end



  assign ce_out = clk_enable;

  assign out = Memory_out1;

endmodule  // HDL_DUT

